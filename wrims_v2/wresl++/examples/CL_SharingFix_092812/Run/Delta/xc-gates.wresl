/*************************************
xc-gates.wresl
 
Tom FitzHugh BOR 4/23/2010

Determines flow through the Delta cross channel and Georgianna Slough using the following equation:

    DXC & Georg. Sl. Flow = (a * Sac Flow) + b
        where a = 0.293 , b = 2090 cfs ==> OPEN GATE POSITION
        where a = 0.133 , b = 829 cfs  ==> CLOSED GATE POSITION

 We can break the equation into individual components that will give the same result:

  Georgianna Sl. Flow           = 0.133*Qsac + 829  ==> OPEN OR CLOSED GATE POSITION
  DXC Flow                              = 0.160*Qsac + 1261 ==> OPEN GATE POSITION
  DXC Flow                              = 0.0               ==> CLOSED GATE POSITION
  
Describe logic for when gates are open or closed here: Following is my draft: WQCP has an initial schedule of how 
many days each month the gates will be open.  But gates are always closed when flow is above 25,000 cfs, so because
of this the actual number of days open can vary from the initial schedule.

Z.Q. Richard Chen, DWR 10/04/2010 
Set DCC_DLTSW switch to control how many days the DCC will open in a month.
*************************************/

/*
Hao Xie, 09/21/2011
The above documented equations are modified based on the flow results from 2009 DSM2 recalibration model
for estimating the DXC & Georg. Sl flow. The equations are modified as follows:

    DXC & Georg. Sl. Flow = (a * Sac Flow) + b
        where a = 0.3217 , b = 1051 cfs ==> OPEN GATE POSITION
        where a = 0.1321 , b = 1087 cfs  ==> CLOSED GATE POSITION

 We can break the equation into individual components that will give the same result:

  Georgianna Sl. Flow           = 0.1321*Qsac + 1087  ==> OPEN OR CLOSED GATE POSITION
  DXC Flow                              = 0.1896*Qsac - 36 ==> OPEN GATE POSITION
  DXC Flow                              = 0.0               ==> CLOSED GATE POSITION

*/
/*
Hao Xie, 09/21/2011
Modify the regression equations used to compute flow through the Delta cross channel and Georgiana Sl for the
BDCP PP (25000ac Restoration was included) scenario derived based on DSM2 outputs

DXC & Georg. Sl. Flow = (a * Sac Flow) + b
     where a = 0.2842, b = 453 cfs ==> OPEN GATE POSITION
         where a = 0.1339, b = 745 cfs ==> CLOSED GATE POSITION

We can break the equation into individual component that will give the same result:

  Georgianna Sl. Flow           = 0.1339*Qsac + 745  ==> OPEN OR CLOSED GATE POSITION
  DXC Flow                              = 0.1503*Qsac - 292 ==> OPEN GATE POSITION
  DXC Flow                              = 0.0               ==> CLOSED GATE POSITION
*/


! Split arc C_DXC into Georgianna Slough and DXC components
define C_DXC_GEO {std kind 'FLOW-GEORGIANA' units 'CFS'}
define C_DXC_DXC {std kind 'FLOW-DXC' units 'CFS'}
goal splitC_DXC {C_DXC = C_DXC_GEO + C_DXC_DXC}

goal GeorgSlough {C_DXC_GEO = 0.1321*C_Hood + 1087.0}  
!goal GeorgSlough {C_DXC_GEO = 0.1339*C_Hood + 745.0}  ! Implements equation described above

!define WQCP_days_open   {select days_open from xchanneldays where month=month}  ! Number of days in each month that the DXC gate is open
define WQCP_days_open   {       !DCC_DLTSW switch added 10/04/2010 by Z.Q. Richard Chen, DWR
    case USERDEF {
	    condition DCC_DLTSW == 2
        select days_open from gui_xchanneldays where month=month}
    case D1641 {
        condition DCC_DLTSW == 1  
        select days_open from xchanneldays where month=month}  ! Number of days in each month that the DXC gate is open
    case NOREGULATION {
        condition always
        value 0} 
       }

!define numberofdaysopen {value WQCP_days_open} 
define numberofdaysopen {value min(WQCP_days_open, NMFS_days_open) }

define fract_open   {value numberofdaysopen/daysin }   ! Fraction of month gates are open
define fract_open_  {alias fract_open kind 'DXC-FRACT-OPEN' UNITS 'NONE'}  !for output only

define SAC_threshold  { value 25000.0} ! Sac flow at which gates will be closed

! The following variables are zero or one if their corresponding condition is false or true, respectively
define int_SAC_below  {INTEGER std kind 'INTEGER' units 'NONE'}                  ! 0: high flow; 1:  low flow
define int_SAC_above  {alias 1. - int_SAC_below kind 'INTEGER' units 'NONE'}     ! 1: high flow; 0:  low flow
define SAC_above {std kind 'FLOW-SAC-ABV' units 'CFS'}      ! zero if C_Hood < threshold
define SAC_below {std kind 'FLOW-SAC-BEL' units 'CFS'}      ! zero if C_Hood > threshold
define SAC_max {value 99999.*taf_cfs}   ! max flow is over 1,600,000 cfs (plenty big)

! following constraints allow only one of the two flow variables to be positive
goal SAC_flood_flow  {SAC_above - SAC_below = C_Hood - SAC_threshold }
goal SAC_abv_force   {SAC_above < int_SAC_above * SAC_max}
goal SAC_bel_force   {SAC_below < int_SAC_below * SAC_max}

! Records actual number of days gates are open (only set when flow is below 25000 cfs)
define DXC_daysopen {lower unbounded kind 'GATE-DAYS-OPEN' units 'NONE'}
define DXC_est { value numberofdaysopen}
define DXC_estdv {alias DXC_est kind 'GATE-DAYS-OPEN' units 'NONE'}
goal setDXC {DXC_daysopen = DXC_est * int_SAC_below}

! Determines flow in DXC, implementing equation described above
! If flow is above 25,000, DXC flow = 0 since the gates are closed
! If flow is below 25,000, DXC flow is determined using open gate equation, adjusted by fraction of month that gates are open. .
goal open_cond_flow { C_DXC_DXC = 0.1896*SAC_threshold*int_SAC_below*fract_open - 0.1896*SAC_below*fract_open + int_SAC_below*(-36.)*fract_open }
!goal open_cond_flow { C_DXC_DXC = 0.1503*SAC_threshold*int_SAC_below*fract_open - 0.1503*SAC_below*fract_open + int_SAC_below*(-292.)*fract_open }

! What is this, do we need this?
GOAL HELP_INTEGER {LHS C_SACDXC RHS 0.0 LHS>RHS PENALTY 0.000001}
