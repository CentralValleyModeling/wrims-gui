! LVE_DeltaSurplus_LVE_ADJUST.wresl
! Same Structure as LVE_DeltaSurplus.wresl except X2 removed
! Calculates Delta Surplus

define EIReqSac  { value (D418[LVE_ADJUST]+D419[LVE_ADJUST])/EXPRATIO_[LVE_ADJUST] }
define EISurplus { value (max(0.,(Inflow[LVE_ADJUST] - EIReqSac)*EXPRATIO_[LVE_ADJUST])) }

! Calculate ANN Requirements based on estimated exports
define ANNReq     { value max(0., JP_MRDO[LVE_ADJUST], EM_MRDO[LVE_ADJUST], RS_MRDO_1[LVE_ADJUST],
                RS_MRDO_2[LVE_ADJUST],RS_MRDO_3[LVE_ADJUST],CO_MRDO[LVE_ADJUST])  }

! Check ANN pushing constraint in the Jun -> Sep period
define SacAnnCondition {
    case JunSep {
    condition month>=Jun .and. month<=Sep .and. C400_exc[LVE_ADJUST]<=1.
    value 0.}
    case other {
    condition always
    value 999999.}
}

! Calculate ANNSurplus based on estimated exports
define ANNSurplus { value max(0., min(C_NDO[LVE_ADJUST] + D_NDO[LVE_ADJUST] - ANNReq, SacAnnCondition)) }

define DeltaSurpAvail {
    case Exist_FNA {
        condition LVESwitch < 1.5
        value max(0., ANNSurplus)
        }
    case otherwise {
        condition always
        value max(0., min(EISurplus,ANNSurplus))
        }
}

/**
! For output
define DeltaSurpAvaildv { alias DeltaSurplusAvail kind 'flow' units 'cfs' }
define DeltaSurplusdv   { alias DeltaSurplus      kind 'flow' units 'cfs' }
define EISurplusdv      { alias EISurplus         kind 'flow' units 'cfs' }
**/
