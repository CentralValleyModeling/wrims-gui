! Friant_allocation.wresl
! MBK (consultants for USBR)
! 11/21/02
! Created for the Upper San Joaquin River Basin Storage Investigation Project
! Implements Friant water allocation scheme
! Revised by C. Hsu, USBR, 02/25/03 for review and documentation project
!##############################################################################
/*
Define total delivery variables for Friant Class I & II water also the water releases due to rainfall or snowmelt runoff
*/
! Total Delivery (Friant-Kern Canal + Madera Canal) of Class 1 Water from Friant
define tot_C1_del {upper unbounded lower unbounded kind 'FRIANT-DEL' units 'TAF' }
! Total Delivery (Friant-Kern Canal + Madera Canal) of Class 2 Water from Friant
define tot_C2_del {upper unbounded lower unbounded kind 'FRIANT-DEL' units 'TAF' }
! Estimated Friant release due to rainfall runoff into Friant
define Fr_rain_rel {upper unbounded lower unbounded kind 'FRIANT-FC' units 'TAF' }
! Estimated volume of water to be released due to snowmelt runoff into Friant
define Fr_snow_rel_vol {upper unbounded lower unbounded kind 'FRIANT-FC' units 'TAF' }
! Define snowmelt release forecast
define snow_rel_for {upper unbounded lower unbounded kind 'FRIANT-FC' units 'TAF' }


/*
Class 1 allocation - March through June
*/
! Sum of the Class 1 water delivered prior to current month
define Class1_delivered {
        case march {
            condition month == mar
            value 0.0 }
        case initial {
            condition month < mar .and. wateryear == 1922
            value 0.0 }
        case otherwise {
            condition always
            sum(i=prevmar,-1,1) tot_C1_del(i) } }

/*
Maximum amount of Class 1 and Class 2 Friant allocations
*/
! Maximum Class 1 allocation is 800 TAF
define Class1_max { value 800. }
! Maximum Class 2 allocation is 1400 TAF
define Class2_max { value 1400. }
! Define temporary variable for class1_alloc
define C1_alloc_tmp {upper unbounded lower unbounded kind 'TEMPORARY' units 'TAF' }

/*
Determination of Friant Class 1 allocation.  Allocation made March through June is determined
by Friant water supply forecast and the difference between Class 1 allocation and delivery.
*/
define class1_alloc {
        case MarthruJun {
           condition   month >= mar .and. month <= jun
            ! CSIII --- (uses Fr_WS_for_cor instead of Fr_WS_for)
            value max(0.0, min(Fr_WS_for, Class1_max - Class1_delivered)) }
            ! CSII  --- value max(0.0, min(Fr_WS_for_cor, Class1_max - Class1_delivered)) }
        case firstmonth {
            condition wateryear == 1922 .and. month == oct
            value 0.0 }
        case otherwise {
            condition   always
            value C1_alloc_tmp(-1) - tot_C1_del(-1) } }
! Allows past values of Class 1 allocation can be accessed via C1_alloc_tmp
goal set_C1_alloc_tmp {C1_alloc_tmp = class1_alloc }


/*
Class 2 plus surplus allocation - March through June
NOTE: must first calculate spills, then subtract spills from water supply available to
get Class 2 allocation
*/
! Sum of Friant inflow from current month through June
define I_MLRTN_thrujun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        sum(i=0,9-month,1) I_MLRTN(i) * cfs_taf(i) }
    case otherwise {
        condition   always
        value 0.0 } }

! Sum of the average evaporation losses from current month through June
define Fr_Evap_jun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        select thru_jun
        from Friant_Evap
        where contract_month = contract_month }
    case otherwise {
        condition   always
        value 0.0  } }

! Sum of the minimum required San Joaquin River below Friant flows from current month through June
define C_MLRTN_min_jun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        select thru_jun
        from Upper_sjr_losses
        where contract_month = contract_month }
    case otherwise {
        condition   always
        value 0.0  } }

! Sum of the combined Madera and Friant-Kern canal losses from current month through June
define FR_losses_jun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        select thru_jun
        from Friant_canal_Losses
        where contract_month = contract_month }
    case otherwise {
        condition   always
        value 0.0  } }

/*
Sum of the estimated deliveries from Friant from current month through June
Assume maximum delivery for spill calculation. Max delivery assumed to avoid unnecessary spills
*/
define Fr_del_est_prct {
        select thru_jun
        from Friant_max_del
        where contract_month = contract_month }
! Define the amount of the estimated deliveries from Friant
define Fr_del_est_jun { value Fr_del_est_prct / 100. * 2200.}

/*
Snowmelt release logic - release due to snowmelt runoff
Forecast of the amount of water that will be spilled from Friant between current month and June
*/
define Fr_for_spill {
    case Febthrujun {
         condition   month >= Feb .and. month <= jun
         value max(0.0, I_MLRTN_thrujun - Fr_del_est_jun - C_MLRTN_min_jun - FR_losses_jun
                 - Fr_Evap_jun + S_MLRTN(-1) - S_MLRTNlevel5) }
    case otherwise {
        condition always
        value 0.0 } }
! Set snowmelt release forecast equals to Friant spill forecast
goal set_snow_rel_for {snow_rel_for = fr_for_spill}

! used for debugging
!define I_MLRTN_jun_ck {alias I_MLRTN_thrujun kind 'temp' units 'none'}
!define Fr_Evap_jun_ck {alias Fr_Evap_jun kind 'temp' units 'none'}
!define FR_loss_ck {alias FR_losses_jun kind 'temp' units 'none'}
!define Fr_del_p_ck {alias Fr_del_est_prct kind 'temp' units 'none'}
!define Fr_del_jun_ck {alias Fr_del_est_jun kind 'temp' units 'none'}
!define C_MLRTN_min_jun_ck {alias C_MLRTN_min_jun kind 'temp' units 'none'}

! Friant flood control release pattern required to release forecast seasonal snowmelt
define Fr_srp {
    case feb {
        condition month == feb
        select percent
        from Feb_snowmelt_release_pattern
        given forecast_spill = fr_for_spill
        use minimum
        where contract_month = contract_month }
    case mar {
        condition month == mar
        select percent
        from Mar_snowmelt_release_pattern
        given forecast_spill = fr_for_spill
        use minimum
        where contract_month = contract_month }
    case apr {
        condition month == apr
        select percent
        from Apr_snowmelt_release_pattern
        given forecast_spill = fr_for_spill
        use minimum
        where contract_month = contract_month }
    case may {
        condition month == may
        select percent
        from May_snowmelt_release_pattern
        given forecast_spill = fr_for_spill
        use minimum
        where contract_month = contract_month }
    case jun {
        condition month == jun
        select percent
        from May_snowmelt_release_pattern
        given forecast_spill = fr_for_spill
        use minimum
        where contract_month = contract_month }
    case otherwise {
        condition always
        value 0.0 } }

/*
Snowmelt release is the forecasted amount of water that will be spilled from Friant
times the Friant flood control release pattern
*/
goal set_snow_rel_volume { Fr_snow_rel_vol = fr_for_spill * Fr_srp / 100. }

! Define temporary variable for class2_alloc
define C2_alloc_tmp {upper unbounded lower unbounded kind 'TEMPORARY' units 'taf'}

! Class 2 Allocation for March, April-May and Jun-Aug
define Class2_alloc {
        case Mar {
            condition month == mar
            value min(Class2_max, Fr_WS_for - Class1_alloc - Fr_for_spill) }
        case initial {
            condition month <= feb .and. wateryear == 1922
            value 0.0 }
        case aprthrumay {
            condition month >= apr .and. month <= may
            value max(0.0, C2_alloc_tmp(-1) - max(0.0, Fr_rain_rel(-1) - Fr_snow_rel_vol(-1)) - (fr_for_spill - snow_rel_for(-1))) }
        case junthruaug {
            condition month >= jun .and. month <= aug
            value max(0.0, C2_alloc_tmp(-1) - max(0.0, Fr_rain_rel(-1) - Fr_snow_rel_vol(-1))) }
        case otherwise {
            condition  always
            value C2_alloc_tmp(-1)}
}

! Allows past values of Class 2 Allocation can be accessed
goal set_C2_alloc_tmp {C2_alloc_tmp = class2_alloc }
