! **************************************************************
! PreEWAStorageMod.wresl
! **************************************************************
!
! This file sets storage adjustments of NOD storage values to
! compensate for NOD debt and NOD backed-up water due to EWA actions.
!
! This file is called in pre-EWA steps of a multi-step study.
!
! The initial condition of upward adjustment for debt
! and downward adjustment for backed-up water is represented by
! S*_mod_dv(PrevSep), which is set in the EWA step.
!
! This file then checks if the NOD reservoirs encroach on their
! flood control cap or if SL reservoirs encroach on their capacities.
! As these encroachments happen, the initial condition adjustment
! (i.e. S*_mod_dv(PrevSep) gets reduced and possibly erased during the
! simulated year).  Reduction potential is checked each month
! (i.e. S*FillAmt).

define EwaDebtCvp2dv {std kind 'DEBT' units 'TAF'}
define EwaDebtSwp2dv {std kind 'DEBT' units 'TAF'}

!Flood Control Caps for NOD reservoirs
define s1_L4_month {
    case october {
        condition month==OCT
        value 12 }
    case otherwise {
        condition always
        value month-1 }
}
define S1level4_prev {select target from res_level where res_num=1,level=4,month=s1_L4_month}
!define S4level5_temp {timeseries kind 'STORAGE-LEVEL' units 'TAF'}
define S44level5_temp {value 0.0}
!define S44level5 {value 0.0}
!define S6level5_temp {timeseries kind 'STORAGE-LEVEL' units 'TAF'}
!define S8level5_temp {timeseries kind 'STORAGE-LEVEL' units 'TAF'}

!Amount to reduce initial storage adjustment from EWA step (prevSep)
define S1FillAmt {
    case October {
        condition month==OCT
        value 0. }
    case ResFill {
        condition S1(-1) > S1level4_prev-.5
        value max(S1(-1)-S1(-2),0.) }
    case otherwise {
        condition always
        value 0. }
}
define S4FillAmt {
    case October {
        condition month==OCT
        value 0. }
    case ResFill {
        !condition S4(-1) + S44(-1) > S4level5_temp + S44level5_temp - .5
        condition S4(-1) + S44(-1) > S4level5 + S44level5_temp - .5
        value max(S4(-1) + S44(-1) - S4(-2) - S44(-2),0.) }
    case otherwise {
        condition always
        value 0. }
}
define S6FillAmt {
    case October {
        condition month==OCT
        value 0. }
    case ResFill {
        !condition S6(-1) > S6level5_temp-.5
        condition S6(-1) > S6level5-.5
        value max(S6(-1)-S6(-2),0.) }
    case otherwise {
        condition always
        value 0. }
}
define S8FillAmt {
    case October {
        condition month==OCT
        value 0. }
    case ResFill {
        !condition S8(-1) > S8level5_temp-.5
        condition S8(-1) > S8level5-.5
        value max(S8(-1)-S8(-2),0.) }
    case otherwise {
        condition always
        value 0. }
}

define S1_mod_dv {lower -1000 kind 'STORAGE-MOD' units 'TAF'}
define S4_mod_dv {lower -1000 kind 'STORAGE-MOD' units 'TAF'}
define S6_mod_dv {lower -1000 kind 'STORAGE-MOD' units 'TAF'}
define S8_mod_dv {lower -1000 kind 'STORAGE-MOD' units 'TAF'}

define S1debtdv {std kind 'debt' units 'taf'}
define S4debtdv {std kind 'debt' units 'taf'}
define S6debtdv {std kind 'debt' units 'taf'}
define S8debtdv {std kind 'debt' units 'taf'}

!define S4_EWAdv {std kind 'storage' units 'taf'}
!define S8_EWAdv {std kind 'storage' units 'taf'}
!define S6_EWAdv {std kind 'storage' units 'taf'}

define S1debt {
    case October {
        condition month==oct
        value 0.0}!S1_mod_dv(prevSep) }
    case ResFill {
        condition always
        value max(0., S1Debtdv(-1)-S1FillAmt) }
}
define S4debt {
    case October {
        condition month==oct
        value 0.0}!max(0., S4_mod_dv(prevSep)+S4_EWAdv(prevSep)) }
    case ResFill {
        condition always
        value max(0., S4Debtdv(-1)-S4FillAmt) }
}
define S6debt {
    case October {
        condition month==oct
        value 0.0}!max(0., S6_mod_dv(prevSep)+S6_EWAdv(prevSep)) }
    case ResFill {
        condition always
        value max(0., S6Debtdv(-1)-S6FillAmt) }
}
define S8debt {
    case October {
        condition month==oct
        value 0.0}!max(0., S8_mod_dv(prevSep)+S8_EWAdv(prevSep)) }
    case ResFill {
        condition always
        value max(0., S8Debtdv(-1)-S8FillAmt) }
}

goal set_S1debtdv {S1debtdv = S1debt}
goal set_S4debtdv {S4debtdv = S4debt}
goal set_S6debtdv {S6debtdv = S6debt}
goal set_S8debtdv {S8debtdv = S8debt}

define S1mod {value 0.0}
define S4mod {value 0.0 - S4_WTS(-1) }  !Piggyback WTS adjustments on S*mod terms
define S6mod {value 0.0 - S6_WTS(-1) }  !Piggyback WTS adjustments on S*mod terms
define S8mod {value 0.0}

goal set_S1_mod_dv {S1_mod_dv = S1mod }
goal set_S4_mod_dv {S4_mod_dv = S4mod }
goal set_S6_mod_dv {S6_mod_dv = S6mod }
goal set_S8_mod_dv {S8_mod_dv = S8mod }

!San Luis storage adjustments don't include EWA assets
define S11_mod_dv {lower -1000 kind 'STORAGE-MOD' units 'TAF'}
define S12_mod_dv {lower -1000 kind 'STORAGE-MOD' units 'TAF'}
define S11mod { value 0.0}
define S12mod { value 0.0}
goal set_S11_mod_dv {S11_mod_dv = S11mod }
goal set_S12_mod_dv {S12_mod_dv = S12mod }

